#!/usr/bin/env python3
"""
Filter latex autogenerated from a Jupyter IPython notebook into a prettier form.
"""
#    f="StrangZoomNotes"; t="Strang Zoom notes"; jupyter-nbconvert-3.10  --to latex $f.ipynb; ./filter_latex.py -x -i $f -t "$t"  >& tmp.tex; xelatex "tmp.tex"; mv tmp.pdf "$f".pdf; rm tmp.*; rm -rf $f"_files" $f".tex"


# f="Siphon"; 
# t="Siphon flow"; 
# jupyter-nbconvert-3.10  --to latex $f.ipynb; 
# ./filter_latex.py  -i $f -t "$t"  >& tmp.tex; 
# pdflatex tmp.tex; 
# mv tmp.pdf $f.pdf; 
# rm tmp.*; 
# rm -rf $f"_files"

import argparse
import re
import sys

def main(args):
    """
    Do parsing of latex
    """

    enc = sys.getfilesystemencoding()
    with open(f"{args.infile}.tex", encoding=enc) as file:
        is_title = True
        line = None

        # EOF is indicated by a line string ""
        # Empty lines are "\n"
        while line != "":
            # Read a single line, like awk
            line = file.readline()
            
            # Allow use of Chinese characters
            if args.xelatex and re.search("begin\{document\}", line):
             	# print("\\usepackage[UTF8]{ctex}")
                print("\\usepackage{xeCJK}")
                print("\\setCJKmainfont{Songti SC}")
                print()

            # Set the author name
            if re.search("begin\{document\}", line):
                print("    \\usepackage{titling}")
                # print("    \\preauthor{\\begin{center}\\fontsize{14bp}{14bp}\\selectfont}")
                # print("    \\postauthor{\\par\\end{center}}")
                print("    \\preauthor{}")
                print("    \\postauthor{\\vskip-5mm}")
                print("    \\author{}")
                #	print("    \\author{Colin P. Stark}")
                print()

            # Give the document a title
            if args.title is not None and re.search("\\\\title", line): 
                print("")
                print("")
                print("    \\title{\\textbf{"+f"{args.title}"+"}}")
                line = file.readline()

            # Suppress printing of date and remove spacing
            if re.search("documentclass", line):
                print(line, end="", flush=True)
                print("")
                print("    \\usepackage{titling}")
                print("    \\predate{}")
                print("    \\postdate{}")
                line = file.readline()
            
            # Insert today's date
            if re.search("begin\{document\}", line):
                print("    \\date{}")

            # Insert command to ensure PDF has white background
            # and make figure labels boldface
            if re.search("begin\{document\}", line):
                print("")
                print("\\pagecolor{white}")
                print("\\usepackage[labelfont=bf]{caption}")
                print("")
                print("")
                print("")
                print("")

            # Tighten margins
            if re.search("\\\\geometry", line):
                print("\\geometry{verbose,tmargin=0.7in,bmargin=0.7in,lmargin=0.8in,rmargin=0.7in}")
                line = file.readline() 

            # Prune off the "Preliminaries subsection title"
            if args.prune and re.search("Preliminaries", line):
                line = file.readline()
                print("}")
                continue
            
            # Turn off all section numbering
            # Convert first section label into the title
            if re.search("\\\\section", line):
                if is_title:
                    is_title=False
                    print("}")
                    print("")
                    line = file.readline()
                    line = file.readline()
                elif not args.secnums:
                    print(line.replace("section","section*"), end="", flush=True)
                    continue

            if re.search("subsection", line) and not args.secnums:
                    print(line.replace("section","section*"), end="", flush=True)
                    continue

                    # gsub("section","section*",$0)

            # /\\subsection/ {
            # 	gsub("subsection","subsection*",$0)
            # }
            # /\\subsubsection/ {
            # 	gsub("subsubsection","subsubsection*",$0)
            # }
            # /\\section\{Summary\}/ {
            # 	gsub("section","section*",$0)
            # }



            # Reduce font size for figure captions
            if args.newfigs and re.search("\\\\caption\{", line):
                print(line.replace("\\caption{","\\caption{\small "), end="", flush=True)
                continue

            # Reduce font size for figure captions
            if args.newfigs and re.search("\\\\end\{figure\}", line):
                print(line, end="", flush=True)
                line = file.readline()
                line = file.readline()
                while ''.join(line.split()) != "":
                    line = file.readline()
                    print()
                continue

            # Wrap a figure environment around each image,
            # grabbing the next paragraph of text as the caption
            if args.legacyfigs and re.search("\\\\begin\{center\}", line):
                print()
                print()
                print()
                print()
                print("    \\begin{figure}")
                print("    \\begin{center}")
                # Get & print "adjustimage" embed line
                line = file.readline()
                print(line, end="", flush=True)
                line = file.readline()
                # End centering
                print(line, end="", flush=True)
                # Skip "hspace" line
                line = file.readline()
                # Skip empty lines
                line = file.readline()
                while ''.join(line.split()) == "":
                    line = file.readline()
                # Print caption text
                print("    \\caption{\\small")
                while ''.join(line.split()) != "":
                    print(line, end="", flush=True)
                    line = file.readline()
                print("    }")
                print("    \\end{figure}")
                line = file.readline()
                print()
                print()
                print()
                print()
            
            # Remove figure caption suppression
            if re.search("DeclareCaptionFormat", line):
                line = file.readline()
            if re.search("captionsetup", line):
                line = file.readline()

            # Skip this markup, which screws up the main font for the rest of the docs.
            if re.search("prompt{Out}", line):
                line = file.readline()

            # Cut all the command cells, which are tcolorbox wrapped
            if not args.codecells and "begin{tcolorbox}" in line:
                # print("\\vskip3mm")
                if args.addspacing:
                    print("\\vskip30mm")
                while "end{tcolorbox}" not in line:
                    line = file.readline()
                line = file.readline()
                continue

            # HACK to fix weird markdown -> latex error for big matrix eqn
            if re.search("textbackslash", line):
                print("\end{equation}")
                continue

            # Print the line
            print(line, end="", flush=True)
                 


if __name__ == "__main__":
    # """Cmd line entry point"""
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-i", 
        "--infile", 
        action="store",
        dest="infile",
        help="Input filename",
    )
    parser.add_argument(
        "-t", 
        "--title", 
        action="store",
        dest="title",
        help="Title",
    )
    parser.add_argument(
        "-x", 
        "--xelatex", 
        action="store_true",
        default=False,
    )
    parser.add_argument(
        "-l", 
        "--legacyfigs", 
        action="store_true",
        default=False,
    )
    parser.add_argument(
        "-n", 
        "--newfigs", 
        action="store_true",
        default=True,
    )
    parser.add_argument(
        "-s", 
        "--secnums", 
        action="store_true",
        default=False,
    )
    parser.add_argument(
        "-c", 
        "--codecells", 
        action="store_true",
        default=False,
    )
    parser.add_argument(
        "-p", 
        "--prune", 
        action="store_true",
        default=False,
    )
    parser.add_argument(
        "-a", 
        "--addspacing", 
        action="store_true",
        default=False,
    )

    main(parser.parse_args())
